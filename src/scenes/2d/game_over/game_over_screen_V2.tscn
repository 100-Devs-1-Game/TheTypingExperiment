[gd_scene load_steps=5 format=3 uid="uid://dkhs0240psl0p"]

[sub_resource type="SystemFont" id="SystemFont_v2"]
font_names = PackedStringArray("Courier New")
subpixel_positioning = 0

[sub_resource type="Theme" id="Theme_v2"]
default_font = SubResource("SystemFont_v2")

[sub_resource type="GDScript" id="GDScript_us14j"]
script/source = "extends Control

## Both skulls visible, slowly closing in on player (scaling up)

@onready var skull_label: Label = %SkullLabel
@onready var skull_label_2: Label = %SkullLabel2

var horror_effects: HorrorEffectsManager
var skull_2_final_position: Vector2
var skull_1_finished_zoom: bool = false

func _ready() -> void:
	_setup_horror_effects()

	if skull_label:
		skull_label.visible = false
		skull_label.pivot_offset = skull_label.size / 2

	if skull_label_2:
		skull_label_2.visible = false
		skull_label_2.modulate = Color(1, 0, 0, 0)
		skull_label_2.pivot_offset = skull_label_2.size / 2

	_show_skull_eerily()


func _hold_with_glitch_pulses(duration: float) -> void:
	var elapsed = 0.0
	var pulse_interval = 0.8
	var next_pulse = pulse_interval

	while elapsed < duration:
		if not get_tree() or not skull_label:
			return

		var delta = 0.1
		elapsed += delta

		# Subtle corruption pulses
		if elapsed >= next_pulse:
			next_pulse += pulse_interval + randf_range(-0.3, 0.5)

			# Intensity flicker
			var original_alpha = skull_label.modulate.a
			skull_label.modulate.a = original_alpha * randf_range(0.7, 1.3)

			# Brief text distortion
			var current_text = skull_label.text
			skull_label.text = _apply_message_corruption(current_text)

			await get_tree().create_timer(0.1).timeout

			if skull_label:
				skull_label.modulate.a = original_alpha
				skull_label.text = current_text

		await get_tree().create_timer(delta).timeout

func _apply_message_corruption(message: String) -> String:
	# Apply glitch block corruption to random characters for unsettling effect
	var corrupted = \"\"
	var corruption_chars = [\"█\", \"▓\", \"▒\", \"░\", \"▄\", \"▀\", \"▌\", \"▐\"]
	var words = message.split(\" \")

	for word_idx in range(words.size()):
		var word = words[word_idx]
		var corrupted_word = \"\"

		# corrupt 1-2 characters per word max, and skip short/important words
		if word.length() > 3 and randf() < 0.4:  # 40% chance to corrupt longer words
			@warning_ignore(\"integer_division\")
			var chars_to_corrupt = min(2, word.length() / 3)  # Max 2 chars or 1/3 of word
			var corruption_positions = []

			# Pick random positions to corrupt (avoid first/last for readability)
			for i in range(chars_to_corrupt):
				var pos = randi_range(1, word.length() - 2)
				if pos not in corruption_positions:
					corruption_positions.append(pos)

			# Apply corruption only to selected positions
			for i in range(word.length()):
				if i in corruption_positions:
					corrupted_word += corruption_chars[randi() % corruption_chars.size()]
				else:
					corrupted_word += word[i]
		else:
			corrupted_word = word

		corrupted += corrupted_word
		if word_idx < words.size() - 1:
			corrupted += \" \"

	return corrupted

func _corrupted_fade_in(glitched_message: String) -> void:
	var fade_steps = 12
	var base_duration = 1.8
	var step_duration = base_duration / fade_steps

	for step in range(fade_steps + 1):
		if not get_tree() or not skull_label:
			return

		var alpha = float(step) / float(fade_steps)

		# Digital artifact simulation - random alpha jumps
		if randf() < 0.3:
			alpha += randf_range(-0.2, 0.3)
			alpha = clamp(alpha, 0.0, 1.0)

		skull_label.modulate.a = alpha

		# Occasionally flicker the text corruption
		if step % 3 == 0 and randf() < 0.4:
			var reglitched = _apply_message_corruption(glitched_message)
			skull_label.text = reglitched
		else:
			skull_label.text = glitched_message

		if step < fade_steps:
			# Variable timing for unstable feel
			var actual_duration = step_duration + randf_range(-0.05, 0.1)
			await get_tree().create_timer(actual_duration).timeout


func _setup_horror_effects() -> void:
	horror_effects = HorrorEffectsManager.new()
	horror_effects.name = \"GameOverHorrorEffects\"
	add_child(horror_effects)

func _show_skull_eerily() -> void:
	if not get_tree():
		return
	_apply_message_corruption(skull_label.text)
	await get_tree().create_timer(0.5).timeout

	# Fade in first skull
	if skull_label:
		skull_label.visible = true
		await _fade_in_skull(skull_label, 0.0)

	# Start zoom on first skull and wait for it to finish
	if skull_label:
		await _slow_zoom(skull_label)

	# Mark that first skull finished zooming
	skull_1_finished_zoom = true

	# Now show second skull
	if skull_label_2 and skull_label:
		await _show_and_move_skull_2()

func _fade_in_skull(skull: Label, delay: float) -> void:
	if delay > 0:
		await get_tree().create_timer(delay).timeout

	var fade_steps = 10
	var fade_duration = 2.0
	var step_duration = fade_duration / fade_steps

	for step in range(fade_steps + 1):
		if not get_tree() or not skull:
			return

		var alpha = float(step) / float(fade_steps)
		skull.modulate.a = alpha

		if step < fade_steps:
			await get_tree().create_timer(step_duration).timeout

func _slow_zoom(skull: Label) -> void:
	var zoom_time = 0.0
	var start_scale = 1.0
	var zoom_duration = 40.0

	while zoom_time < zoom_duration:
		if not get_tree() or not skull:
			return

		var delta = get_process_delta_time()
		zoom_time += delta

		# Very slow zoom from 1.0 to 1.3 over 40 seconds
		var zoom_progress = min(zoom_time / zoom_duration, 1.0)
		var eased_zoom = ease(zoom_progress, -1.5)  # Slow start
		var skull_scale = lerp(start_scale, 1.3, eased_zoom)

		skull.scale = Vector2(skull_scale, skull_scale)

		await get_tree().process_frame

	# Zoom finished - keep at final scale
	skull.scale = Vector2(1.3, 1.3)

func _show_and_move_skull_2() -> void:
	if not get_tree() or not skull_label_2 or not skull_label:
		return

	# Brief delay before second skull appears
	await get_tree().create_timer(1.0).timeout

	if not skull_label_2 or not skull_label:
		return

	# Store skull_2's final position
	skull_2_final_position = skull_label_2.position

	# Use skull_1's position directly - it's already at the correct visual position
	skull_label_2.position = skull_label.position

	# Set skull_2 to same scale as skull_1
	skull_label_2.scale = skull_label.scale
	skull_label_2.visible = true

	# Fade in the second skull
	await _choppy_fade_in_skull_2()

	# Slowly drift to final position
	await _drift_to_final_position()

func _choppy_fade_in_skull_2() -> void:
	var fade_steps = 6
	var fade_duration = 1.0
	var step_duration = fade_duration / fade_steps

	for step in range(fade_steps + 1):
		if not get_tree() or not skull_label_2:
			return

		var alpha = float(step) / float(fade_steps)
		skull_label_2.modulate.a = alpha

		if step < fade_steps:
			await get_tree().create_timer(step_duration).timeout

func _drift_to_final_position() -> void:
	if not get_tree() or not skull_label_2:
		return

	var drift_duration = 30.0  # Extremely slow, almost imperceptible movement
	var start_position = skull_label_2.position
	var elapsed = 0.0

	while elapsed < drift_duration:
		if not get_tree() or not skull_label_2:
			return

		var delta = get_process_delta_time()
		elapsed += delta

		var progress = elapsed / drift_duration
		# Very gentle easing - starts almost imperceptibly slow
		var eased_progress = ease(progress, -2.0)  # Strong ease out for very subtle start

		skull_label_2.position = start_position.lerp(skull_2_final_position, eased_progress)

		await get_tree().process_frame
"

[sub_resource type="SystemFont" id="SystemFont_8h3y3"]
font_names = PackedStringArray("Courier New")

[node name="GameOverFinal" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme = SubResource("Theme_v2")
script = SubResource("GDScript_us14j")

[node name="Background" type="ColorRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 1)

[node name="SkullLabel2" type="Label" parent="."]
unique_name_in_owner = true
visible = false
layout_mode = 0
offset_left = 389.38
offset_top = 92.495
offset_right = 754.38
offset_bottom = 791.495
theme_override_fonts/font = SubResource("SystemFont_8h3y3")
theme_override_font_sizes/font_size = 8
text = "                        M MMN P MLLMPQMOOROOMOPQNN
                              L   K    L     J
             ROQPQPQQOOPPPPPNQPQPPPQQPPPOOPQQRPPQPOOOPRQQPP
           ONNLKKKNMMOMLMNONNLOMMLNLPMMOMMLNKMLMMLKMNMMNMMM   O
         O NNOOOPONNMMMOOONNOPOPMMNONMMNNMNONNNOPOOPNOPPOOMNQN
       NOPNNNONPPPPNONNONONNMNMNMONONONNOOONOMMMONNNNNNOPNQNPSTUU
         OLJJKLPPROONOPPONOPPPOOOOPPPOOOONONMOPPPPNOOOQTQRRRRQPQR
    OPOPOPONOOPRRQQQQQNQQQQPOOPOOPQPPOPPOOOPPRPQQQPPQPQOQPSQSQPQQQQOP
                  L   POOOONNKNNNMNMNNKMMMMMMONNOO  N
  PNOMRPOPONNPPNPQQQPRQQRSRRPSPPPPRQRPPPQOQRQSQQPRRRRQQPPMPORPOQPPQPPNOQ
  N  PNN OMNOOMO PPPPOOONMOPNLMNNMMMNNNPNOMNQOQSRPQNONQOO ONONMONQ  OONM
N MNOOQNPPNOOOPOPQRRPOPPPPPPPROPQQQOQOPQOOQPQRRRRRQRRRRRQNPOPOOPNPNRQPNN P
    QQPSPPPOOPOOOPPPOOSLORPOQLMMOPOOMRNQNQPRRSQPPMNOPLNPPLOQPPOPRRQQPOQR
N   N PO OPPQQ        POOQPPPNQPPOPOPONPQQQQORRPOP    O    RPPP    R N
    PPMOQPOPQPOO        LLKPPNQQONNOPNLNOQORNQOOON        P NRSRPSOSPO

    URQQRQ P                     QL OP RMO                      P TSRR

                              S   OPPPNPPS
                               POPLNPO POPN
                              O  LI NMNP N
                              QMOL         Q
                              QQ           R
                            OLP            R S

  NK                    QPPPN                QOPPO                 P LLQ P
  POON               OPL PPO                     N P               Q RPP
P PQON   O     P     PPPRPP O                N O N  L           P    PPN N
 LQTTQRRS   OQPSNN                               OOO      Q     RQQSSQPP
S   US                                              W     R        S     P
  PM  R                 O                                          RPPOP   P

PKN                         P                O OQM                       Q
                              T            P
                           LO R            M POPM
                        QTT       Q          NUTRT
T                       Q N QPOPOPP    R PMO M SRR                       T
                      J POPRS POPMN    NOOPPOSSQPRPP
                        NPR                     PS
                      I QRRPO                PRR PPO

                   R P            R      P   QRS

                     QP T         RR         O   P









                            T R   V    U   V S"

[node name="CenterContainer" type="CenterContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="SkullLabel" type="Label" parent="CenterContainer"]
unique_name_in_owner = true
layout_mode = 2
theme_override_font_sizes/font_size = 8
text = "                        M MMN P MLLMPQMOOROOMOPQNN
                              L   K    L     J
             ROQPQPQQOOPPPPPNQPQPPPQQPPPOOPQQRPPQPOOOPRQQPP
           ONNLKKKNMMOMLMNONNLOMMLNLPMMOMMLNKMLMMLKMNMMNMMM   O
         O NNOOOPONNMMMOOONNOPOPMMNONMMNNMNONNNOPOOPNOPPOOMNQN
       NOPNNNONPPPPNONNONONNMNMNMONONONNOOONOMMMONNNNNNOPNQNPSTUU
         OLJJKLPPROONOPPONOPPPOOOOPPPOOOONONMOPPPPNOOOQTQRRRRQPQR
    OPOPOPONOOPRRQQQQQNQQQQPOOPOOPQPPOPPOOOPPRPQQQPPQPQOQPSQSQPQQQQOP
                  L   POOOONNKNNNMNMNNKMMMMMMONNOO  N
  PNOMRPOPONNPPNPQQQPRQQRSRRPSPPPPRQRPPPQOQRQSQQPRRRRQQPPMPORPOQPPQPPNOQ
  N  PNN OMNOOMO PPPPOOONMOPNLMNNMMMNNNPNOMNQOQSRPQNONQOO ONONMONQ  OONM
N MNOOQNPPNOOOPOPQRRPOPPPPPPPROPQQQOQOPQOOQPQRRRRRQRRRRRQNPOPOOPNPNRQPNN P
    QQPSPPPOOPOOOPPPOOSLORPOQLMMOPOOMRNQNQPRRSQPPMNOPLNPPLOQPPOPRRQQPOQR
N   N PO OPPQQ        POOQPPPNQPPOPOPONPQQQQORRPOP    O    RPPP    R N
    PPMOQPOPQPOO        LLKPPNQQONNOPNLNOQORNQOOON        P NRSRPSOSPO

    URQQRQ P                     QL OP RMO                      P TSRR

                              S   OPPPNPPS
                               POPLNPO POPN
                              O  LI NMNP N
                              QMOL         Q
                              QQ           R
                            OLP            R S

  NK                    QPPPN                QOPPO                 P LLQ P
  POON               OPL PPO                     N P               Q RPP
P PQON   O     P     PPPRPP O                N O N  L           P    PPN N
 LQTTQRRS   OQPSNN                               OOO      Q     RQQSSQPP
S   US                                              W     R        S     P
  PM  R                 O                                          RPPOP   P

PKN                         P                O OQM                       Q
                              T            P
                           LO R            M POPM
                        QTT       Q          NUTRT
T                       Q N QPOPOPP    R PMO M SRR                       T
                      J POPRS POPMN    NOOPPOSSQPRPP
                        NPR                     PS
                      I QRRPO                PRR PPO

                   R P            R      P   QRS

                     QP T         RR         O   P









                            T R   V    U   V S"
